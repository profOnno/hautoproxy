global
        chroot /var/lib/haproxy
	pidfile /var/run/haproxy.pid
#       user haproxy
#       group haproxy
#       daemon
#        lua-load hello.lua
	lua-load acme-http01-webroot.lua
	
	ssl-default-bind-options no-sslv3
	ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS

	ssl-default-server-options no-sslv3
	ssl-default-server-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS

	tune.ssl.default-dh-param 2048

defaults
    	timeout connect 9s
        timeout client 60s
	timeout server 30s

frontend fe_http
	log 127.0.0.1 local0 debug
        mode http
        option httplog
        bind *:80

	acl url_acme_http01 path_beg /.well-known/acme-challenge/
     	http-request use-service lua.acme-http01 if METH_GET url_acme_http01

	bind *:443 ssl crt-list /etc/haproxy/cert-list.txt

# template ssl
> for i,c in ipairs(ssl_containers) do
	http-request redirect scheme https if { hdr_sub(host) -i $(c.Name).$(c.Domain) } !{ ssl_fc }
> end
# end template

# add tag so backend knows we termintated the SSL
	acl HAS_SSL ssl_fc
	reqadd X-Forwarderd-Proto:\ https if HAS_SSL

# template SNI test
> for i,c in ipairs(containers) do
	acl is_$(c.Name) hdr_sub(host) -i $(c.Name).$(c.Domain)
> end
# end template

# template select backend
> for i,c in ipairs(containers) do
	use_backend be_$(c.Name) if is_$(c.Name)
> end
# end template

# template backends
> for i,c in ipairs(containers) do
backend be_$(c.Name)
	mode http
	server server1 $(c.IP):$(c.Port)
> end
# end template
